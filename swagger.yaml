swagger: "2.0"
info:
  description: "The CLUCK (Common Lab Use Clock Kit) is Team 1540's time tracking system. This document details the API endpoints of the CLUCK server."
  version: "1.0.0"
  title: "CLUCK API"
  contact:
    email: "robinsonz@catlin.edu"
  license:
    name: "Licensed under MIT"
    url: "https://opensource.org/licenses/MIT"
tags:
- name: "clockapi"
  description: "API for clock-in/clock-out terminals"
- name: "timesheet"
  description: "API for personnel displays"
- name: "admin"
  description: "API for managing users and terminals"
- name: "misc"
  description: "Miscellaneous methods for all clients"
schemes:
- "https"
paths:
  /clockapi/clock:
    post:
      tags:
      - "clockapi"
      summary: "Clock a user in or out"
      operationId: "doClock"
      parameters:
      - in: "query"
        name: "user"
        description: "The user ID"
        required: true
        type: string
      - in: "query"
        name: "clockingIn"
        description: "Whether the user is clocking in or out"
        required: true
        type: boolean
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Successful clock-in or clock-out"
          schema:
            type: "object"
            required:
            - "time"
            properties:
              time:
                type: string
                example: "1526615236234"
                description: "The UNIX epoch timestamp (in milliseconds) that was recorded server-side."
        404:
          description: "Clock-in or clock-out errored"
          schema:
            type: "object"
            required:
            - "message"
            properties:
              message:
                type: string
                enum:
                - "not_found"
                - "repeat_clock"
                - "unknown"
                example: "not_found"
                description: "A description of the error. 'not_found' if the user was invalid, 'repeat_clock' if the user is attempting to clock in and has already clocked in (or vice versa)"
      security:
      - timeclock-auth: []
  /clockapi/id:
    get:
      operationId: "getId"
      tags:
      - "clockapi"
      summary: "Get a user's ID given their name"
      parameters:
      - in: "query"
        name: "name"
        description: "The user's name"
        required: true
        type: string
      responses:
        200:
          description: "Found user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User was not found"
      security:
      - timeclock-auth: []
  /clockapi/name:
    get:
      operationId: "getName"
      tags:
      - "clockapi"
      summary: "Get a user's name given their ID"
      parameters:
      - in: "query"
        name: "id"
        description: "The user's ID"
        required: true
        type: string
      responses:
        200:
          description: "Found user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User was not found"
      security:
      - timeclock-auth: []
  /timesheet/loggedin:
    get:
      operationId: "getLoggedIn"
      tags:
      - "timesheet"
      summary: "Get currently logged in users"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            example:
              Dean Kamen: "1526615236234"
              Dale Yocum: "1526926457910"
              Woodie Flowers: "1526926451234"
            additionalProperties:
              description: "A map of each user's name to the time (in ms) since the Unix epoch when they clocked in."
              type: string
      security:
      - timesheet-auth: []
  /admin/addcredential:
    post:
      operationId: "addCredential"
      tags:
      - "admin"
      summary: "Add a credential"
      parameters:
      - in: body
        name: "credential"
        schema:
          type: "object"
          required:
          - "accessLevel"
          - "username"
          - "password"
          properties:
            accessLevel:
              type: string
              enum:
              - "ADMIN"
              - "TIMECLOCK"
              - "TIMESHEET"
              example: "TIMECLOCK"
              description: "The access level of the credentials."
            username:
              type: string
              description: "The login username for the credentials."
            password:
              type: string
              description: "The login password for the credentials."
      responses:
        200:
          description: "Success"
        400:
          description: "Failed"
          schema:
            properties:
              message:
                type: string
                description: "A description of the error."
                enum:
                - cred_already_exists
                example: cred_already_exists
      security:
      - admin-auth: []
  /admin/removecredential:
    post:
      operationId: removeCredential
      tags:
      - "admin"
      summary: "Remove a credential"
      parameters:
      - in: query
        name: username
        type: string
        description: "The username of the credential to remove."
        required: true
      responses:
        200:
          description: Success
        404:
          description: "Failed"
          schema:
            properties:
              message:
                type: string
                description: "A description of the error."
                enum:
                - cred_not_found
                example: cred_not_found
      security:
      - admin-auth: []
  /admin/adduser:
    post:
      operationId: addUser
      tags:
      - "admin"
      summary: "Add a user"
      parameters:
      - in: query
        name: id
        type: string
        description: "The ID of the user to add."
        required: true
      - in: query
        name: name
        type: string
        description: "The user's name."
        required: true
      - in: query
        name: email
        type: string
        description: "The user's email address."
        required: true
      responses:
        200:
          description: "Success"
        400:
          description: "Failed"
          schema:
            properties:
              message:
                type: string
                description: "A description of the error."
                enum:
                - already_exists
                example: already_exists
      security:
      - admin-auth: []
  /admin/removeuser:
    post:
      operationId: removeUser
      tags:
      - "admin"
      summary: "Remove a user"
      parameters:
      - in: query
        name: id
        type: string
        description: "The ID of the user to remove."
        required: true
      responses:
        200:
          description: "Success"
        404:
          description: "Failed"
          schema:
            properties:
              message:
                type: string
                description: "A description of the error."
                enum:
                - not_found
                example: not_found
      security:
      - admin-auth: []
  /admin/allusers:
    get:
      operationId: getUsers
      tags:
      - "admin"
      summary: "Get all user names and IDs"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            required:
            - "users"
            properties:
              users:
                type: array
                description: "All users"
                items:
                  type: object
                  required:
                  - "name"
                  - "id"
                  - "email"
                  - "clockedIn"
                  - "timeIn"
                  - "lastEventTime"
                  properties:
                    id:
                      type: string
                      description: "The user's ID"
                      example: "1540"
                    name:
                      type: string
                      description: "The user's name"
                      example: "Dale Yocum"
                    email:
                      type: string
                      description: "The user's email"
                      example: "yocumd@catlin.edu"
                    clockedIn:
                      type: boolean
                      description: "Whether or not the user is clocked in"
                      example: "true"
                    timeIn:
                      type: integer
                      example: 3564606
                      description: "The total number of milliseconds the user has spent clocked in, ever (equal to the user's total hours multiplied by 3600000)."
                    lastEventTime:
                      type: string
                      example: "1526615236234"
                      description: "The last time the user clocked in or out, in milliseconds from the UNIX epoch."
      security:
      - admin-auth: []
  /admin/allcredentials:
    get:
      operationId: getCredentials
      tags:
      - "admin"
      summary: "Get all credential names and access levels"
      description: "Get all credentials with their username and access level. Passwords cannot be accessed, as the backend only stores a hashed form."
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            required:
            - "credentials"
            properties:
              credentials:
                type: array
                description: "All credentials"
                items:
                  type: object
                  required:
                  - "username"
                  - "accessLevel"
                  properties:
                    username:
                      type: string
                      description: "The username for the credential"
                      example: "timeclock"
                    accessLevel:
                      type: string
                      enum:
                      - "ADMIN"
                      - "TIMECLOCK"
                      - "TIMESHEET"
                      example: "TIMECLOCK"
      security:
      - admin-auth: []
  /admin/reset:
    post:
      tags:
      - "admin"
      summary: "Reset all users' hour counts"
      operationId: resetHours
      responses:
        200:
          description: "Success"
      security:
      - admin-auth: []
  /admin/voidclock:
    post:
      tags:
      - "admin"
      summary: "Clock a user out without incrementing their hours"
      operationId: "voidClock"
      parameters:
      - name: "id"
        in: query
        type: string
        description: "The ID of the user to void."
        required: true
      responses:
        200:
          description: "Success"
        404:
          description: "Failure"
          schema:
            type: "object"
            required:
            - "message"
            properties:
              message:
                type: string
                enum:
                - "not_found"
                - "repeat_clock"
                - "unknown"
                example: "not_found"
                description: "A description of the error. 'not_found' if the user was invalid or 'repeat_clock' if the user is already clocked out or has never clocked in."
      security:
      - admin-auth: []
  /admin/edituser:
    post:
      tags:
      - "admin"
      summary: "Edit a user"
      operationId: "editUser"
      parameters:
      - name: "id"
        in: query
        type: string
        description: "The user's ID"
        required: true
      - name: "newId"
        in: query
        type: string
        description: "The user's new ID, if desired"
        required: false
      - name: "newName"
        in: query
        type: string
        description: "The user's new name, if desired"
        required: false
      - name: "newEmail"
        in: query
        type: string
        description: "The user's new email, if desired"
        required: false
      responses:
        200:
          description: "Success"
        404:
          description: "Failed"
          schema:
            properties:
              message:
                type: string
                description: "A description of the error."
                enum:
                - not_found
                example: not_found
      security:
      - admin-auth: []
  /ping:
    get:
      tags:
      - "misc"
      summary: "Ping the server"
      operationId: "ping"
      responses:
        200:
          description: "Server is up"

securityDefinitions:
  timeclock-auth:
    type: basic
    description: "Authorization for clockapi methods"
  admin-auth:
    type: basic
    description: "Authorization for admin methods"
  timesheet-auth:
    type: basic
    description: "Authorization for timesheet methods"
definitions:
  User:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: string
        description: "The user's ID"
        example: "254"
      name:
        type: string
        description: "The user's name"
        example: "Dean Kamen"
